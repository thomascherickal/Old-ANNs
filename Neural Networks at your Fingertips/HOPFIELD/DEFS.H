
#ifndef COMMON_FILES_INCLUDED
#define COMMON_FILES_INCLUDED
#include <math.h>
#include <iostream.h>
#include <conio.h>
#include <stdlib.h>
#endif

const int NO_ELEMENTS    = 50;
const int NO_VECTORS     = 3;
const int INPUT_NO       = 0;
const int MODULUS		 = 5;


const double MAX_ITERATIONS = 200;
const double LEAST_ERROR = 0.00000001;

typedef long double DP;

/*********************************************/
/* Calculated Weight values(to be)           */
/*********************************************/


DP Weights[NO_ELEMENTS][NO_ELEMENTS];

/***************************************************************/
/*This particular application trains a Hopfield net to identify*/
/*  numbers from 0 to 9         							   */
/***************************************************************/

		
DP Vectors[NO_VECTORS][NO_ELEMENTS] = {
	{  1, 1, 1, 1, 1,
	   1, 1, 1, 1, 1,
	   1, 1, 0, 1, 1,
	   1, 1, 0, 1, 1,
	   1, 1, 0, 1, 1,
	   1, 1, 0, 1, 1,
	   1, 1, 0, 1, 1,
	   1, 1, 0, 1, 1,
	   1, 1, 1, 1, 1,
	   1, 1, 1, 1, 1
	},
	{
	   0, 1, 1, 1, 0,
	   0, 1, 1, 1, 0,
	   0, 1, 1, 1, 0,
	   0, 1, 1, 1, 0,
	   0, 1, 1, 1, 0,
	   0, 1, 1, 1, 0,
	   0, 1, 1, 1, 0,
	   0, 1, 1, 1, 0,
	   0, 1, 1, 1, 0,
	   0, 1, 1, 1, 0
	},

	{  1, 1, 1, 1, 1,
	   1, 1, 1, 1, 1,
	   0, 0, 0, 1, 1,
	   0, 0, 0, 1, 1,
	   1, 1, 1, 1, 1,
	   1, 1, 1, 1, 1,
	   1, 1, 0, 0, 0,
	   1, 1, 0, 0, 0,
	   1, 1, 1, 1, 1,
	   1, 1, 1, 1, 1
	}/*,
	{  1, 1, 1, 1, 1,
	   1, 1, 1, 1, 1,
	   0, 0, 0, 1, 1,
	   0, 0, 0, 1, 1,
	   1, 1, 1, 1, 1,
	   1, 1, 1, 1, 1,
	   0, 0, 0, 1, 1,
	   0, 0, 0, 1, 1,
	   1, 1, 1, 1, 1,
	   1, 1, 1, 1, 1
	},
	{  1, 1, 0, 1, 1,
	   1, 1, 0, 1, 1,
	   1, 1, 0, 1, 1,
	   1, 1, 1, 1, 1,
	   1, 1, 1, 1, 1,
	   0, 0, 0, 1, 1,
	   0, 0, 0, 1, 1,
	   0, 0, 0, 1, 1,
	   0, 0, 0, 1, 1,
	   0, 0, 0, 1, 1
	},

	{  1, 1, 1, 1, 1,
	   1, 1, 1, 1, 1,
	   1, 1, 0, 0, 0,
	   1, 1, 0, 0, 0,
	   1, 1, 1, 1, 1,
	   1, 1, 1, 1, 1,
	   0, 0, 0, 1, 1,
	   0, 0, 0, 1, 1,
	   1, 1, 1, 1, 1,
	   1, 1, 1, 1, 1
	}*/
	/*,
	{  1, 1, 1,
	   1, 0, 0,
	   1, 1, 1,
	   1, 0, 1,
	   1, 1, 1
	},

	{  1, 1, 1,
	   0, 0, 1,
	   0, 0, 1,
	   0, 0, 1,
	   0, 0, 1
	},
	{  1, 1, 1,
	   1, 0, 1,
	   1, 1, 1,
	   1, 0, 1,
	   1, 1, 1
	},
	{  1, 1, 1,
	   1, 0, 1,
	   1, 1, 1,
	   0, 0, 1,
	   1, 1, 1
	}
	*/
};


DP Inputs[NO_VECTORS][NO_ELEMENTS] = {

	{  1, 1, 1, 1, 1,
	   1, 1, 1, 1, 1,
	   1, 1, 0, 1, 1,
	   1, 1, 0, 1, 1,
	   1, 1, 0, 1, 1,
	   1, 1, 0, 1, 1,
	   1, 1, 0, 1, 1,
	   1, 1, 0, 1, 1,
	   1, 1, 1, 1, 1,
	   1, 0, 1, 1, 1
	},
	{
	   0, 1, 1, 1, 0,
	   0, 1, 1, 1, 0,
	   0, 1, 0, 1, 0,
	   0, 1, 1, 1, 0,
	   0, 0, 1, 1, 0,
	   0, 1, 1, 1, 0,
	   0, 1, 0, 1, 0,
	   0, 1, 0, 1, 0,
	   0, 1, 1, 1, 0,
	   0, 1, 1, 0, 0
	},

	{  1, 1, 1, 1, 1,
	   1, 1, 1, 0, 1,
	   0, 0, 0, 1, 1,
	   0, 0, 0, 1, 1,
	   1, 1, 1, 1, 1,
	   1, 0, 1, 1, 1,
	   1, 1, 0, 0, 0,
	   1, 1, 0, 0, 0,
	   1, 1, 1, 1, 1,
	   1, 0, 1, 1, 1
	}/*,
	{  1, 1, 1, 1, 1,
	   1, 1, 1, 0, 1,
	   0, 0, 0, 1, 1,
	   0, 0, 0, 1, 1,
	   1, 1, 0, 1, 1,
	   1, 1, 1, 1, 1,
	   0, 0, 0, 1, 1,
	   0, 0, 0, 0, 1,
	   1, 1, 1, 1, 1,
	   1, 1, 1, 1, 1
	},
	{  1, 1, 0, 1, 1,
	   1, 1, 0, 1, 1,
	   1, 1, 0, 0, 1,
	   1, 1, 1, 1, 1,
	   1, 1, 1, 1, 1,
	   0, 0, 0, 1, 1,
	   0, 0, 0, 1, 1,
	   0, 0, 0, 0, 1,
	   0, 0, 0, 1, 1,
	   0, 0, 0, 0, 1
	},

	{  1, 1, 1, 1, 1,
	   1, 1, 1, 0, 1,
	   1, 1, 0, 0, 0,
	   1, 0, 0, 0, 0,
	   1, 1, 1, 1, 1,
	   1, 1, 1, 1, 1,
	   0, 0, 0, 1, 1,
	   0, 0, 0, 0, 1,
	   1, 0, 1, 1, 1,
	   1, 1, 1, 1, 1
	}*//*,
	{  1, 1, 1,
	   1, 0, 0,
	   1, 1, 1,
	   1, 0, 0,
	   1, 1, 1
	},

	{  1, 1, 1,
	   0, 0, 1,
	   0, 0, 1,
	   0, 0, 0,
	   0, 0, 1
	},
	{  1, 1, 1,
	   1, 0, 0,
	   1, 1, 1,
	   1, 0, 1,
	   1, 1, 1
	},
	{  1, 1, 1,
	   0, 0, 1,
	   1, 1, 1,
	   0, 0, 1,
	   1, 1, 1
	}*/
	
};



/***********************************************************/
/*               SOME USEFUL FUNCTIONS                     */
/***********************************************************/

DP Activate(DP S)
{
	return 1 / ( 1 + exp(-S));
}

DP HardLimiter(DP Out)
{
	return (Out > 0 ? 1 : Out == 0 ?  0: -1 );
}

DP Deriv(DP y)
{
	return y * (1 - y);
}
